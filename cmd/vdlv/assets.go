// Code generated by go-bindata.
// sources:
// static/css.css
// static/js.js
// static/main.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticCssCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\x61\x8f\xd3\x30\x0c\x86\x3f\xaf\xbf\x22\x12\x42\x82\x0f\x41\xdb\x09\x21\xe8\xfd\x1a\x27\x71\xdb\xe8\xd2\x38\x72\x33\xb6\x13\xe2\xbf\xe3\xa4\x1d\xe4\x56\x74\xa0\xfb\x32\x69\xf5\xfb\x3e\x7e\x6d\xb7\x53\x9e\x83\xfa\xd1\x1d\x26\xf4\xe3\x94\x7b\x75\x3a\x1e\xdf\x3f\x76\x87\x8b\x77\x79\xba\xfd\xfb\xd9\x75\x86\xdc\x73\x2b\xb3\x10\xec\x87\x52\x55\x5a\x9d\xbe\xa4\xeb\xc7\x3f\x9e\x5d\xa9\x3b\x0c\x14\xb3\x1e\x60\xf6\xe1\xb9\x57\x0b\xc4\x45\xd4\x33\xf0\xe8\x63\xaf\xbe\x56\xfe\x3b\x2b\x12\xf0\x11\xb9\x74\x71\x7e\x49\x01\x44\x6b\x02\xd9\xa7\xc7\x57\xdb\x16\x73\xa6\x64\x80\xdb\x7c\x0f\x52\x14\x9f\x21\x76\xc8\xda\x50\xce\x34\xcb\x38\xe9\xaa\x16\x0a\xde\x09\x18\x0a\xb8\x31\x43\xb1\x67\xbc\x66\xed\xd0\x12\x43\xf6\x24\xe9\x22\x45\x5c\x65\xc2\xb8\xef\x71\xac\x3d\xd6\x41\xb4\x60\x7a\x55\xbb\x6e\xd0\x09\xc2\x50\xe4\xff\xca\xb0\x9f\x96\xbe\x23\x0f\x81\x2e\xba\x6c\xcb\x32\x85\xf0\x3b\xc2\x9b\xa1\xdb\x8e\x45\x84\xc5\xdf\x86\x3e\xad\x73\xdc\xc6\xfa\xb6\x7f\x01\xb6\x76\xcd\x3a\x3e\x05\xb9\x55\x01\xbd\x38\xed\x4c\x91\x96\x04\x16\xdb\x00\x19\x4c\x40\xcd\x74\x59\x8d\x0b\x06\xb4\x19\xdd\x0d\x60\x24\xef\xc8\x74\x8e\xae\x57\xc9\xc7\xa7\x06\x5f\x7f\x4d\x2a\xaa\x2d\xce\x67\x9c\xf7\x68\x8b\x65\x41\xeb\xed\x20\xf8\x51\xce\x66\x31\x66\x64\x79\x68\xcf\xbc\x90\x04\x77\x38\xc0\x39\xe4\x7b\x78\xa4\x06\xfe\xf0\x0a\x3c\x81\x73\x3e\x8e\x9a\xb7\xaf\xa4\x4a\xdb\x8e\xb5\x70\x8f\x07\xe6\xff\xe3\xbf\xb4\xdd\x56\xf3\xf7\x28\x97\xc9\x67\xd4\x75\xcd\xb2\x31\xae\xf7\xf8\x15\x00\x00\xff\xff\xa3\xfe\xe6\xc9\xc6\x03\x00\x00")

func staticCssCssBytes() ([]byte, error) {
	return bindataRead(
		_staticCssCss,
		"static/css.css",
	)
}

func staticCssCss() (*asset, error) {
	bytes, err := staticCssCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/css.css", size: 966, mode: os.FileMode(436), modTime: time.Unix(1457440088, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticJsJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\x6d\x4f\xdb\x4a\x16\xfe\x6c\x7e\xc5\x30\xd2\x12\xbb\xa4\x4e\xa0\x6a\x3f\x34\x4d\x11\x45\xac\xca\x8a\x52\x6d\x61\xb7\x95\xda\xea\x6a\x6c\x4f\x12\x97\xc9\x8c\x6b\x8f\x13\xd0\x15\xff\xfd\x9e\x33\x2f\xb1\x4d\x12\x40\xf7\x8a\x0f\xa0\x78\xe6\xcc\x73\xde\x9f\x39\xb3\x60\x25\x29\x6b\x29\x73\x39\x25\x63\x32\x61\xa2\xe2\xa3\x1d\x5c\xfc\x5d\xe7\xba\x59\xd9\x99\xd4\x32\xd5\xb9\x92\x44\xab\xe9\x54\x70\xad\x8a\x30\x22\x7f\xee\x04\x28\x3a\x63\x62\x02\xa2\x99\x4a\xeb\x39\x97\x3a\x9e\x72\x7d\x2a\x38\xfe\xfc\x70\x7b\x96\x85\x14\x84\x51\x84\x46\xa3\x46\xfe\xf0\xa1\x03\x89\xd2\xfe\xc0\x4e\x90\x4f\x48\x88\x5f\x71\xa5\x6f\x05\x8f\xb3\xbc\x2a\x04\xbb\x25\xe3\x31\xa1\x52\x49\x4e\x8d\x19\x41\x4b\x62\xc6\xf3\xe9\x0c\x6d\xa7\x29\x13\x69\xf8\x7a\xf8\x2f\xf2\x92\x1c\xbe\x29\x6e\x22\x3a\xea\x4a\xae\xb0\x08\x4d\x84\x4a\xaf\xa9\xdb\x3e\x7c\x12\xd2\x1d\xe1\x10\x9b\xfb\xda\x5b\x98\xc6\xbc\xd1\xc3\x98\x07\x43\x03\xfa\xfa\xd0\x83\xee\x04\x25\xd7\x75\x29\x7d\xe4\xef\x5a\xb1\x67\xbf\xd8\x4d\xae\xc3\xba\x14\x7d\x32\x91\xab\xf8\x97\xfc\x37\xe0\x49\xbe\x24\xdf\x3e\x9d\x7f\xd4\xba\xf8\xc2\x7f\xd7\xbc\xd2\x21\x06\x1c\x36\x63\x25\x85\x62\x19\x66\xd3\x21\xd9\xdc\x05\x13\x19\xfe\xe7\xf2\xf3\x45\x5c\xb0\xb2\xe2\xa1\x9e\xe5\x55\x5c\xf2\xaa\x50\xb2\xe2\x57\xfc\x46\x47\x91\x37\x08\x20\x0a\x2e\x43\x0a\x89\xa2\x7d\x02\xfa\x3d\x72\xc5\x65\x16\xca\x5a\xe0\x02\x58\x8a\xd6\x08\x56\xe9\x74\x8e\xda\x28\x6d\x17\x4e\x0a\xb0\x4a\xf0\x3f\xae\xf9\x6d\x5d\x84\x7c\x01\xd9\x36\x56\x60\x7e\xcd\x57\xbc\x9c\xe5\xe9\x8c\xec\x8e\xc9\xc1\x2b\x6b\x9f\x8d\x84\x35\x02\xa1\xd3\x07\x8a\xa6\xe7\xf0\x7b\x68\x1a\x62\xa6\xf1\x82\x89\x9a\xc7\x55\x9d\x54\xba\x84\xfa\x86\x95\x8a\x0b\x6e\xac\xb9\xd4\xac\xd4\x51\x0c\xeb\x73\x88\xc5\x2e\xda\xba\xa6\xd2\xe9\x34\xae\x38\x30\x58\x9f\xa8\x92\x84\xb8\x91\x9b\xe5\x2e\x22\x96\xc7\x08\x76\xde\x8f\xc9\x70\x44\x5e\xbe\xcc\x2d\x68\xcb\x9c\xef\xf9\x4f\x2c\xdd\xde\x0f\xd9\xb3\x7b\x41\x47\x41\xcb\xda\x7c\xff\xa0\xbf\xa6\x00\x9d\x0b\x82\xa4\xe4\xec\x1a\x7f\xdd\x59\x3b\x1d\xc4\x3c\x73\x0e\xf9\xb6\xc1\x95\x0a\x8f\x55\x5f\x73\x3d\x0b\x69\x98\x89\x45\x44\x23\xab\xb8\x39\xd4\xe8\x7c\xe3\x43\x62\x71\x1d\x86\xe9\x35\xda\xb8\xb2\xeb\x09\x63\x6f\x8f\xec\x22\x4f\x74\x3c\x71\xf9\x37\xe6\x35\x1d\xd2\x04\xd6\x1b\x8d\x48\x0e\xc8\x9e\x67\x82\x97\x3a\xa4\x6e\xcd\xb0\x45\xa7\x02\xf0\x40\xa3\xcd\x49\xe3\xc2\x9a\xe8\x4e\xd0\x14\xa1\x31\x05\x8a\x75\xc5\x71\xba\x34\x79\xc4\x14\x2e\x2b\xd7\x37\x5f\x79\x72\x09\xfd\xcf\x01\x70\x59\xbd\x1d\x0c\x28\xd9\x27\xcb\x5c\x66\x6a\x19\x03\x2f\x30\x0c\x7f\x3c\x53\x95\x86\x65\x3a\x00\xc4\x23\xf8\x1b\xa3\x10\x97\xa9\xca\xf8\xff\xbe\x9c\x9d\xa8\x39\xf4\x0d\x14\x23\x06\xcc\x34\xce\xb2\x82\xbe\x9b\xf3\xaa\x62\x53\xde\x6e\x3d\xbe\x70\x1e\xa0\x05\x68\x61\xab\x05\x61\x2f\xce\x98\x66\xc6\x21\xf4\x37\x8b\xcf\x73\x50\x0b\x05\x6a\x9a\xcc\x87\x12\xdb\x19\x37\xdc\x7e\xfc\xef\x5c\x70\xc9\xe6\xbc\x4f\xdc\xc2\x79\x2e\x9b\x8f\xcb\x99\x5a\x1e\x97\xa5\x5a\x46\x36\xfa\x81\xe3\xf6\x2c\xfe\x2f\xfc\xc0\x52\xb0\xc5\x47\xf6\x71\xed\x73\xad\x47\x66\xad\x4a\x4b\x25\xc4\x95\x2a\x6c\xa1\x9b\xaf\x8f\x86\xbd\x30\xc8\x18\x54\xe3\x62\x2a\x54\xc5\xd7\xb9\xa5\x9b\xad\x6e\xfa\xdb\x0a\xe9\x0f\x69\xca\x92\xd0\x27\x68\x0d\xd6\xae\x2a\x34\xa4\x4d\x91\xad\xd8\x4c\x56\x41\x11\x26\x1a\xd5\x2a\x0c\x68\x92\xe3\x52\x3a\x10\x20\x7b\xe4\x65\xb7\x25\xd5\xef\x47\x58\x01\x7b\x88\xb7\x4d\x12\xf7\xac\xd4\x4a\xdf\x36\xd1\xc6\xa0\x7e\x13\x3d\x93\x7e\x13\xb3\xc7\xef\xd3\x38\x97\x92\x97\x1f\xaf\x3e\x9d\x63\x36\xe1\xa0\x4f\x1e\x96\x16\x10\x07\x98\x52\x6d\xa6\xcc\xea\xc3\xed\x09\xf4\x48\x75\x01\x3e\x85\xd4\x72\x0c\xcf\xf0\x00\x5d\xd5\x9e\x03\x88\xc1\xf3\xa9\x9e\x91\xf7\x64\xe8\x72\x69\x36\x00\xd7\x09\x7c\x1f\xfe\x34\xac\x64\xd8\x52\xdf\xd8\xbd\xad\xc6\x9f\x63\x30\x2c\x76\x9c\xb7\xb9\xe7\x20\x02\xf6\x3c\x18\x46\x96\xe2\x0c\xf5\x58\xb0\x6e\xf1\x07\x76\xd5\x55\xc6\x99\xd4\xea\xff\x39\x5f\x86\xf6\xd4\xdd\xca\xbc\x7b\xfb\x67\x93\x0b\xce\x33\x9e\x59\x39\x64\x88\x2e\x91\x0f\x91\xb5\xdf\xd9\x18\x7e\x40\x76\x2d\x54\x0e\x51\x72\xbe\x8f\xc8\xfe\xbe\xa3\x72\xe3\x65\x52\xf8\x78\xb7\x64\x81\xd9\x8d\x0d\x76\x40\x4a\x56\x1b\x60\x82\x08\x93\x22\xf2\xd4\x17\x75\xea\x75\x9b\xb4\xbf\xdb\xc5\xe3\xc1\x4c\x0a\xd3\xee\x7e\xba\x12\xd2\x98\x27\xe4\xd6\x74\x63\xd6\x92\x82\x46\x36\x71\x18\x69\x3c\xd3\x2e\xa6\x86\xef\xef\xef\xa0\x36\x44\xf1\x55\x96\x00\x71\x4d\x3b\x45\x96\x82\x2f\x9a\x3b\xc5\x21\xcd\xf2\x85\x2d\x29\x2b\x09\x39\x37\xe3\x96\xf9\x70\xd6\x7b\x3c\x27\x91\xa2\xa5\x86\xb8\x58\x96\x59\x6b\x2d\x02\xea\x63\x4f\x51\xc5\x36\x61\xa0\xc7\x2d\x2d\xac\x80\x89\x26\x3b\x99\xe5\x22\x0b\x2d\xdf\xfe\x7d\x68\xa9\x9e\x0d\x9a\x95\xe5\x3f\xc0\xd6\x30\xc5\x31\x58\x5a\x29\x50\x02\x73\xf5\x6a\x68\x3f\x81\x7a\xf0\xf3\x70\xab\xf6\x26\xf6\xcc\x31\xb6\x29\x80\x13\x25\x27\xf9\xd4\x2e\x2b\xe0\xe3\xa2\xd6\xeb\x17\x40\xd0\x14\x75\x3a\x63\x72\xca\x43\x97\x6a\xdf\x09\xdb\x5d\x82\xda\xcd\x61\x06\x2d\xf5\x71\xf6\x8b\xa5\xe0\x89\x77\xa8\xc7\x26\x9a\x97\x20\xdd\xeb\xbb\xca\x8b\x46\xcd\x34\x01\xf8\xa7\x92\x25\x82\x67\xad\xda\xb5\x53\x37\x38\x0e\xed\x6e\xe6\x7c\x06\x73\x7e\x77\x7a\xdf\x24\x97\xde\x32\x49\x1d\xf6\xf6\x77\xca\xfd\x2a\x8e\xba\x3d\x77\xc5\xa6\xb6\xe3\xae\x4e\xbf\x5d\x1d\x7f\x39\x3d\x06\xca\xde\x10\xc6\x87\xf8\x60\xed\x16\x83\x31\x57\x23\x7a\x9f\x74\x47\xe8\x67\x1a\xa5\x02\x4b\x2a\xcc\x5a\x37\xf6\xa3\x7a\x52\x6b\x8d\xdf\x30\xab\x47\xe4\x88\xd0\x0c\x6e\x10\xcd\x29\x79\x4b\xa8\xf5\x80\x3a\x36\x82\xb7\x02\x86\x73\x90\x14\x47\x16\xc3\x5c\x86\x0e\x0e\x6f\xc9\xe7\xb8\x79\x7d\x8c\xb6\x8e\x68\x6e\xdf\x3f\x15\x36\xf8\x64\xe2\xd2\x7e\x6e\xf9\xe2\x76\xdc\xfc\xc0\xf5\xdc\x21\xe5\xa7\x90\x70\x87\x5f\x29\x1d\x35\xd7\xcc\x7d\x6e\x7d\xbc\x00\xed\xfb\xc0\x36\x16\xfc\x07\xc9\x0b\xf0\x1e\x9e\x75\x73\xb5\xe0\xb6\xc7\x9a\xc6\x81\xcb\xa8\xdb\x09\x6d\x8f\x37\xdd\x4c\xd1\x63\x2f\xd4\xb5\x9e\xb7\xa9\x7b\xe6\x1a\xc5\x60\x69\xf6\xb4\x40\xc9\x27\xb5\xa9\xbd\x1a\xf5\x8a\x22\x35\xf3\xef\xb3\x42\xe0\xd4\xf8\x43\x42\x2b\xbb\xe1\xc0\x9a\xea\x65\xdf\x91\xc3\x88\xe8\x0e\xb7\xae\x46\xcd\xa6\x09\xea\x02\xc6\x07\xbe\xf7\x50\xe1\x37\x45\x9f\x1a\x9e\xd8\x26\xe7\x4d\xdb\x3c\x44\x9a\xf7\x9a\x1d\x0d\xaf\x5d\xe1\xc2\x6f\x43\x76\xdf\x7b\x89\x2a\x33\x5e\xf6\x7e\x62\xd9\x1d\x14\x37\x04\xde\xcf\x70\x3d\x97\x3c\xb3\x35\xd8\x9d\xd9\x37\x1f\x33\x1c\x19\x75\x8b\x00\xb2\xcf\xcb\xb2\x2e\x74\xd8\x9d\xb4\x57\xeb\x74\xdd\x54\x32\x78\x21\x95\x9e\xe1\x6c\xaf\x15\xe4\xf1\xc5\x80\x58\xd8\xbf\x02\x00\x00\xff\xff\xde\x53\x2b\xfd\xa1\x12\x00\x00")

func staticJsJsBytes() ([]byte, error) {
	return bindataRead(
		_staticJsJs,
		"static/js.js",
	)
}

func staticJsJs() (*asset, error) {
	bytes, err := staticJsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/js.js", size: 4769, mode: os.FileMode(436), modTime: time.Unix(1457450158, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\xc1\x6e\xd4\x30\x10\x3d\x87\xaf\x30\x96\x90\xb3\x87\x26\x08\x09\x84\x5a\x7b\x0f\xa0\x22\x55\xe2\x06\x9c\x91\xd7\x99\x8d\xbd\xeb\xb5\x23\x7b\x12\x35\xb7\x7e\x02\x7c\x63\x7f\x04\xdb\x49\xb7\x6a\x2b\x10\x27\x8f\x5f\x66\xde\xbc\xe7\x99\xf0\xd7\x9d\x57\x38\x0f\x40\x34\x9e\xec\xf6\x15\x5f\x8e\x8a\x6b\x90\x5d\x3a\x2b\x8e\x06\x2d\x6c\xa7\xce\x4e\xbc\x5d\xe2\x8c\x9e\x00\x25\x51\x5a\x86\x08\x28\xe8\x8f\xef\x5f\x2e\x3e\xd2\xf2\xc1\x1a\x77\x24\x01\xac\xa0\x11\x67\x0b\x51\x03\x20\x25\xb9\x83\xa0\x08\xb7\xd8\xaa\x18\x29\xd1\x01\xf6\x82\xa6\xb0\xc9\xd7\x52\x18\x55\x30\x03\x92\x18\x94\xa0\x87\xd8\x1c\x12\xcc\xdb\x05\xcc\x7a\xda\x55\x10\xdf\xf9\x6e\x2e\x05\x9d\x99\x88\xe9\x04\x53\xde\xa1\x34\x0e\x02\xcb\xf0\x23\x8e\x7e\xd8\xc9\x15\xac\xee\xef\x7e\x71\xb9\xb4\x65\x07\x39\xc9\x85\xf8\x12\x7d\xdf\x5b\x48\x99\xf5\x86\x6d\xbf\x9a\x88\xc6\xf5\xbc\x95\xdb\xfb\xbb\xdf\x85\xab\x4d\x64\x2f\x58\xb5\xb4\x7b\x46\x8a\x3d\xc1\x34\x98\x5e\xe3\x25\x51\xd2\xaa\xfa\xfd\xdb\x37\xe4\x82\xbc\xfb\x30\xdc\x6e\x56\x31\x2f\x09\x76\x1e\xff\x8b\xe0\x6a\x55\xce\xf3\xab\xc9\x00\xf2\xc1\x6c\xf4\x16\x18\xf1\xee\x08\xf3\x38\x9c\x91\x9f\xe5\x5a\xc3\x04\x0e\x53\xf3\x3a\xcd\x6b\x43\xd2\xc4\xd6\xe2\x7f\xa8\x79\xf2\x48\x9f\x17\xb6\xd5\x7f\xc5\x8d\x1b\x46\x5c\xc6\xc7\x76\x23\xa2\x77\x8c\x4c\xd2\x8e\xe9\x7a\xe3\x10\x42\x18\x07\x3c\x5b\xd9\x5b\x2f\x93\x93\x90\x0d\x65\x85\xca\x1a\x75\x14\xcc\x3c\x24\xd6\xcf\x5f\xe5\x31\x38\x0f\xba\xaa\x26\x19\x88\x22\x82\xa4\xc5\x1c\x4f\xc9\x4d\xd3\x03\x5e\x5b\xc8\xe1\xa7\xf9\xa6\xab\xe9\xea\x98\x6e\xae\x72\xba\x6a\x22\x58\x50\x68\xbc\xfb\x96\xac\x62\xaa\x54\x4d\x91\xd8\x58\x70\x3d\xea\xe7\x59\xd7\xae\xfb\x5b\xce\x3e\xb5\x8c\x75\xe1\x7d\xb2\x7b\xcb\xce\xa5\x1d\x2c\x3f\xc7\x9f\x00\x00\x00\xff\xff\xbc\x39\xf6\xff\x34\x03\x00\x00")

func staticMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticMainHtml,
		"static/main.html",
	)
}

func staticMainHtml() (*asset, error) {
	bytes, err := staticMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.html", size: 820, mode: os.FileMode(436), modTime: time.Unix(1457444836, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/css.css":   staticCssCss,
	"static/js.js":     staticJsJs,
	"static/main.html": staticMainHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"css.css":   &bintree{staticCssCss, map[string]*bintree{}},
		"js.js":     &bintree{staticJsJs, map[string]*bintree{}},
		"main.html": &bintree{staticMainHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
